/* USER CODE BEGIN Header Universidad del Valle de Guatemala Keren Gamarro 23546 cambio de modo entre los dos contadores*/
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int contadorDecadas = 0;   // Contador modo 0 (4 décadas) incluimos los 2 contadores para los dos tipos de modo
int contadorRGB = 0;       // Contador modo 1 (RGB)
int modo = 0;              // 0 = décadas, 1 = RGB este contador es el del modo

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
uint8_t readButton(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void mostrarDecadas(int valor);
void mostrarRGB(int valor);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// ==== Función anti-rebote ====
uint8_t readButton(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
    if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) { // botón a GND con pull-up
        HAL_Delay(50);
        if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
            while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);
            return 1;
        }
    }
    return 0;
}

// ==== Mostrar contador en LEDs (modo 0 - décadas) ====
void mostrarDecadas(int valor) {
    // Apagar todos
    HAL_GPIO_WritePin(Led1contador_GPIO_Port, Led1contador_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(Led2contador_GPIO_Port, Led2contador_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(Led3contador_GPIO_Port, Led3contador_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(Led4contador_GPIO_Port, Led4contador_Pin, GPIO_PIN_RESET);

    switch (valor) {
        case 0: HAL_GPIO_WritePin(Led1contador_GPIO_Port, Led1contador_Pin, GPIO_PIN_SET); break;
        case 1: HAL_GPIO_WritePin(Led2contador_GPIO_Port, Led2contador_Pin, GPIO_PIN_SET); break;
        case 2: HAL_GPIO_WritePin(Led3contador_GPIO_Port, Led3contador_Pin, GPIO_PIN_SET); break;
        case 3: HAL_GPIO_WritePin(Led4contador_GPIO_Port, Led4contador_Pin, GPIO_PIN_SET); break;
    }
}

// ==== Mostrar color en LEDs RGB (modo 1) ====
void mostrarRGB(int valor) {
    // Apagar todos
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Naranja
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Amarillo
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // Verde

    switch(valor) {
        case 1: // 100
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
            break;
        case 2: // 101
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
            break;
        case 3: // 001
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
            break;
        case 4: // 011
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
            break;
        case 5: // 010
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
            break;
        case 6: // 110
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
            break;
        default: // 0 = todos apagados
            break;
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  mostrarDecadas(contadorDecadas);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
        // ===== Botón de cambio de modo =====
        if(readButton(GPIOA, GPIO_PIN_4)) { // Botón modo en PA4
            modo = !modo; // alternar entre 0 y 1
            if(modo == 0) {
                mostrarDecadas(contadorDecadas);
            } else {
                mostrarRGB(contadorRGB);
            }
        }

        // ===== Modo 0: Contador de 4 décadas =====
        if(modo == 0) {
            if(readButton(GPIOA, GPIO_PIN_0)) { // Botón subir
                contadorDecadas++;
                if(contadorDecadas > 3) contadorDecadas = 0;
                mostrarDecadas(contadorDecadas);
            }
            if(readButton(GPIOA, GPIO_PIN_1)) { // Botón bajar
                contadorDecadas--;
                if(contadorDecadas < 0) contadorDecadas = 3;
                mostrarDecadas(contadorDecadas);
            }
        }

        // ===== Modo 1: Contador RGB =====
        if(modo == 1) {
            if(readButton(GPIOA, GPIO_PIN_0)) { // Botón subir
                contadorRGB++;
                if(contadorRGB > 6) contadorRGB = 0;
                mostrarRGB(contadorRGB);
            }
            if(readButton(GPIOA, GPIO_PIN_1)) { // Botón bajar
                contadorRGB--;
                if(contadorRGB < 0) contadorRGB = 6;
                mostrarRGB(contadorRGB);
            }
        }
    }
  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led3contador_Pin|Led4contador_Pin|naranja_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, amarillo_Pin|Led1contador_Pin|Led2contador_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : boton1_Pin boton2_Pin modo_Pin */
  GPIO_InitStruct.Pin = boton1_Pin|boton2_Pin|modo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Led3contador_Pin Led4contador_Pin naranja_Pin */
  GPIO_InitStruct.Pin = Led3contador_Pin|Led4contador_Pin|naranja_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : verde_Pin */
  GPIO_InitStruct.Pin = verde_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(verde_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : amarillo_Pin Led1contador_Pin Led2contador_Pin */
  GPIO_InitStruct.Pin = amarillo_Pin|Led1contador_Pin|Led2contador_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
